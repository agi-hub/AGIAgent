{
  "codebase_search": {
    "description": "Find snippets of code from the codebase most relevant to the search query. This is a semantic search tool, so the query should ask for something semantically matching what is needed.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The search query to find relevant code. You should reuse the user's exact query/most recent message with their wording unless there is a clear reason not to."
        },
        "target_directories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Glob patterns for directories to search over"
        }
      },
      "required": ["query"]
    }
  },
  "read_file": {
    "description": "Read the contents of a file. When should_read_entire_file=true, the entire file is read regardless of line parameters. When should_read_entire_file=false, only the specified line range is read.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_file": {
          "type": "string",
          "description": "The path of the file to read. You can use either a relative path in the workspace or an absolute path."
        },
        "should_read_entire_file": {
          "type": "boolean",
          "description": "Whether to read the entire file. When true, line parameters are ignored. When false, line parameters are required. Defaults to false."
        },
        "start_line_one_indexed": {
          "type": "integer",
          "description": "The one-indexed line number to start reading from (inclusive). Required when should_read_entire_file=false, ignored when should_read_entire_file=true."
        },
        "end_line_one_indexed_inclusive": {
          "type": "integer",
          "description": "The one-indexed line number to end reading at (inclusive). Required when should_read_entire_file=false, ignored when should_read_entire_file=true."
        }
      },
      "required": ["target_file", "should_read_entire_file"]
    }
  },
  "run_terminal_cmd": {
    "description": "PROPOSE a command to run on behalf of the user. For ANY commands that would use a pager or require user interaction, you should append ` | cat` to the command. For commands that are long running/expected to run indefinitely until interruption, please run them in the background.",
    "parameters": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string",
          "description": "The terminal command to execute"
        },
        "is_background": {
          "type": "boolean",
          "description": "Whether the command should be run in the background"
        }
      },
      "required": ["command", "is_background"]
    }
  },
  "list_dir": {
    "description": "List the contents of a directory. The quick tool to use for discovery, before using more targeted tools like semantic search or file reading.",
    "parameters": {
      "type": "object",
      "properties": {
        "relative_workspace_path": {
          "type": "string",
          "description": "Path to list contents of, relative to the workspace root."
        }
      },
      "required": ["relative_workspace_path"]
    }
  },
  "grep_search": {
    "description": "Fast text-based regex search that finds exact pattern matches within files. **PERFORMANCE GUIDELINES**: For complex searches, use multiple simple queries instead of one complex query with many '|' operators. Limit queries to 3-5 terms maximum. Use exclude_pattern to skip common directories like 'output_*/*|__pycache__/*|*.egg-info/*|cache/*' for better performance.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The regex pattern to search for"
        },
        "case_sensitive": {
          "type": "boolean",
          "description": "Whether the search should be case sensitive"
        },
        "exclude_pattern": {
          "type": "string",
          "description": "Glob pattern for files to exclude"
        },
        "include_pattern": {
          "type": "string",
          "description": "Glob pattern for files to include (e.g. '*.ts' for TypeScript files)"
        }
      },
      "required": ["query"]
    }
  },
  "edit_file": {
    "description": "Use this tool to propose an edit to an existing file or create a new file. This will be read by a less intelligent model, which will quickly apply the edit.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_file": {
          "type": "string",
          "description": "The target file to modify. You can use either a relative path in the workspace or an absolute path."
        },
        "edit_mode": {
          "type": "string",
          "description": "Editing mode: 'lines_replace' (Smart merge mode - use existing code markers for precise insertion, or directly replace the entire file), 'append' (safest - append to the end of the file), 'full_replace' (completely replace file content). **For short files (under 100 lines), prefer 'full_replace' over 'lines_replace' for better reliability.** Note: 'append' only adds content to the end, while 'full_replace' completely overwrites the file.",
          "enum": ["lines_replace", "append", "full_replace"]
        },
        "code_edit": {
          "type": "string",
          "description": "Edit content instructions:\n1. lines_replace mode has two usages:\n   a) Smart merge: Use '// ... existing code ...' or '# ... existing code ...' markers to indicate where to preserve original code, and the system will merge precisely based on context\n      **IMPORTANT for precise matching**: When using existing code markers, always include at least 3 lines of original code BEFORE the content to be replaced, then the replacement content, then at least 3 lines of original code AFTER. This provides sufficient context for accurate anchor detection and prevents ambiguous matches in files with similar code blocks.\n      Example format:\n      ```\n      # ... existing code ...\n      function_call_before()\n      another_line_before()\n      previous_context_line()\n      old_buggy_line()  // This line will be replaced\n      next_context_line()\n      following_line_after()\n      final_line_after()\n      # ... existing code ...\n      ```\n   b) Full replacement: Provide the complete new file content (without existing code markers), equivalent to full_replace\n2. append mode: Directly provide the content to append to the end of the file\n3. full_replace mode: Provide the complete new file content, fully replacing the original file"
        },
        "instructions": {
          "type": "string",
          "description": "A single sentence instruction describing what you are going to do for the sketched edit."
        }
      },
      "required": ["target_file", "edit_mode", "code_edit"]
    }
  },
  "file_search": {
    "description": "Fast file search based on fuzzy matching against file path. Use if you know part of the file path but don't know where it's located exactly.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "Fuzzy filename to search for"
        }
      },
      "required": ["query"]
    }
  },
  "delete_file": {
    "description": "Deletes a file at the specified path. The operation will fail gracefully if the file doesn't exist.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_file": {
          "type": "string",
          "description": "The path of the file to delete, relative to the workspace root."
        }
      },
      "required": ["target_file"]
    }
  },
  "web_search": {
    "description": "Search the web for real-time information about any topic. Use this tool when you need up-to-date information that might not be available in your training data.",
    "parameters": {
      "type": "object",
      "properties": {
        "search_term": {
          "type": "string",
          "description": "The search term to look up on the web. Be specific and include relevant keywords for better results."
        }
      },
      "required": ["search_term"]
    }
  },
  "tool_help": {
    "description": "Get detailed help information for a specific tool, including its parameters and usage examples.",
    "parameters": {
      "type": "object",
      "properties": {
        "tool_name": {
          "type": "string",
          "description": "The name of the tool to get help for"
        }
      },
      "required": ["tool_name"]
    }
  },
  "fetch_webpage_content": {
    "description": "Fetch content from a webpage URL for analysis or information extraction.",
    "parameters": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL to fetch content from"
        },
        "search_term": {
          "type": "string",
          "description": "Optional search term to highlight in the content"
        }
      },
      "required": ["url"]
    }
  },
  "get_background_update_status": {
    "description": "Get the status information and statistics of the background incremental update thread for code repository monitoring to track automatic code indexing updates.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": []
    }
  },
  "talk_to_user": {
    "description": "Display a question to the user and wait for keyboard input with timeout. This tool allows interactive communication with the user.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The question to display to the user"
        },
        "timeout": {
          "type": "integer",
          "description": "Maximum time to wait for user response in seconds (default: 10 seconds)"
        }
      },
      "required": ["query"]
    }
  },
  "idle": {
    "description": "Idle tool that represents doing nothing in this round, primarily used for multi-agent synchronization. This tool allows an agent to explicitly indicate that no action is needed in the current execution round.",
    "parameters": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Optional message explaining why the agent is idling"
        },
        "reason": {
          "type": "string",
          "description": "Optional reason for idling (e.g., 'waiting_for_other_agents', 'task_completed', 'no_action_needed')"
        }
      },
      "required": []
    }
  },
  "get_sensor_data": {
    "description": "Acquire physical world information including images, videos, audio, and sensor data from various sources such as cameras, microphones, or sensor devices.",
    "parameters": {
      "type": "object",
      "properties": {
        "type": {
          "type": "integer",
          "description": "Data type to acquire: 1=image, 2=video (5 seconds), 3=audio, 4=sensor data",
          "enum": [1, 2, 3, 4]
        },
        "source": {
          "type": "string",
          "description": "Source identifier: file path for existing files, or device number for cameras/microphones/sensors (e.g. '0' for camera 0)"
        },
        "para": {
          "type": "object",
          "description": "Parameters in JSON format. For images/cameras: {\"resolution\": \"640x320\"}. For videos: {\"resolution\": \"640x320\", \"duration\": 5}. For audio: {\"sampling_rate\": 16000, \"duration\": 5}. For sensors: varies by sensor type.",
          "properties": {
            "resolution": {
              "type": "string",
              "description": "Resolution for image/video capture (e.g., '640x320', '1920x1080')"
            },
            "duration": {
              "type": "integer",
              "description": "Duration in seconds for video/audio capture"
            },
            "sampling_rate": {
              "type": "integer",
              "description": "Sampling rate for audio capture (default: 16000 Hz)"
            }
          }
        }
      },
      "required": ["type", "source"]
    }
  },
  "todo_update": {
    "description": "Update todo task status in todo.md file and return the complete updated file content. This tool allows you to mark tasks as completed, in progress, blocked, or pending, and provides real-time progress tracking.",
    "parameters": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "integer",
          "description": "The ID of the task to update (1, 2, 3, etc.)"
        },
        "status": {
          "type": "string",
          "description": "New status for the task",
          "enum": ["pending", "in_progress", "completed", "blocked", "skipped"]
        },
        "description": {
          "type": "string",
          "description": "Optional description explaining the status change or completion details"
        },
        "action": {
          "type": "string",
          "description": "Action to perform",
          "enum": ["update_status", "get_progress", "list_tasks", "get_next_task"],
          "default": "update_status"
        }
      },
      "required": ["task_id"]
    }
  }
} 