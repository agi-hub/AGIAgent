{
  "workspace_search": {
    "description": "Find snippets of code from the codebase most relevant to the search query. This is a semantic search tool, so the query should ask for something semantically matching what is needed.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The search query to find relevant code. You should reuse the user's exact query/most recent message with their wording unless there is a clear reason not to."
        },
        "target_directories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Glob patterns for directories to search over"
        }
      },
      "required": ["query"]
    }
  },
  "read_file": {
    "description": "Read the contents of a file. When should_read_entire_file=true, the entire file is read regardless of line parameters. When should_read_entire_file=false, only the specified line range is read.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_file": {
          "type": "string",
          "description": "The path of the file to read. You can use either a relative path in the workspace or an absolute path."
        },
        "should_read_entire_file": {
          "type": "boolean",
          "description": "Whether to read the entire file. When true, line parameters are ignored. When false, line parameters are required. Defaults to false."
        },
        "start_line_one_indexed": {
          "type": "integer",
          "description": "The one-indexed line number to start reading from (inclusive). Required when should_read_entire_file=false, ignored when should_read_entire_file=true."
        },
        "end_line_one_indexed_inclusive": {
          "type": "integer",
          "description": "The one-indexed line number to end reading at (inclusive). Required when should_read_entire_file=false, ignored when should_read_entire_file=true."
        }
      },
      "required": ["target_file", "should_read_entire_file"]
    }
  },
  "run_terminal_cmd": {
    "description": "PROPOSE a command to run on behalf of the user. For ANY commands that would use a pager or require user interaction, you should append ` | cat` to the command. For commands that are long running/expected to run indefinitely until interruption, please run them in the background.",
    "parameters": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string",
          "description": "The terminal command to execute"
        },
        "is_background": {
          "type": "boolean",
          "description": "Whether the command should be run in the background"
        }
      },
      "required": ["command", "is_background"]
    }
  },
  "grep_search": {
    "description": "Fast text-based regex search that finds exact pattern matches within files. **PERFORMANCE GUIDELINES**: For complex searches, use multiple simple queries instead of one complex query with many '|' operators. Limit queries to 3-5 terms maximum. Use exclude_pattern to skip common directories like 'output_*/*|__pycache__/*|*.egg-info/*|cache/*' for better performance.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The regex pattern to search for"
        },
        "case_sensitive": {
          "type": "boolean",
          "description": "Whether the search should be case sensitive"
        },
        "exclude_pattern": {
          "type": "string",
          "description": "Glob pattern for files to exclude"
        },
        "include_pattern": {
          "type": "string",
          "description": "Glob pattern for files to include (e.g. '*.ts' for TypeScript files)"
        }
      },
      "required": ["query"]
    }
  },
  "edit_file": {
    "description": "Use this tool to propose an edit to an existing file or create a new file. This will be read by a less intelligent model, which will quickly apply the edit.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_file": {
          "type": "string",
          "description": "The target file to modify. You can use either a relative path in the workspace or an absolute path."
        },
        "edit_mode": {
          "type": "string",
          "description": "Editing mode: 'lines_replace' (precise replacement using exact code matching), 'append' (safest - append to the end of the file), 'full_replace' (completely replace file content).",
          "enum": ["lines_replace", "append", "full_replace"]
        },
        "old_code": {
          "type": "string",
          "description": "For 'lines_replace' mode: The exact code snippet to find and replace. Must match the existing code 100% precisely (including whitespace and indentation). Required for lines_replace mode, ignored for other modes."
        },
        "code_edit": {
          "type": "string",
          "description": "Edit content instructions:\n- lines_replace mode: Provide the new code to replace the old_code with.\n- append mode: Directly provide the content to append to the end of the file\n- full_replace mode: Provide the complete new file content, fully replacing the original file"
        }
      },
      "required": ["target_file", "edit_mode", "code_edit"]
    }
  },
  "web_search": {
    "description": "Search the web for real-time information about any topic. Use this tool when you need up-to-date information that might not be available in your training data, or when you need to verify current facts. The search results will include relevant snippets and URLs from web pages. This is particularly useful for questions about current events, technology updates, or any topic that requires recent information.",
    "parameters": {
      "type": "object",
      "properties": {
        "search_term": {
          "type": "string",
          "description": "The search term to look up on the web. Be specific and include relevant keywords for better results. For technical queries, include version numbers or dates if relevant."
        }
      },
      "required": ["search_term"]
    }
  },
  "search_img": {
    "description": "Obtain relevant images based on the input query, save the images to local files, and return a JSON list of the image file paths. Uses a multi-search engine strategy: If Google is available, search in the order Google->Baidu->Bing; if Google is not available, search in the order Baidu->Bing.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "Image search query string, describing the content of the images to find. Please use specific and clear descriptive terms, such as 'red rose flower', 'blue sky and white clouds landscape', etc."
        }
      },
      "required": ["query"]
    }
  },
  "fetch_webpage_content": {
    "description": "Fetch content from a webpage URL for analysis or information extraction.",
    "parameters": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL to fetch content from"
        },
        "search_term": {
          "type": "string",
          "description": "Optional search term to highlight in the content"
        }
      },
      "required": ["url"]
    }
  },
  "get_sensor_data": {
    "description": "Acquire physical world information including images, videos, audio, and sensor data from various sources such as cameras, microphones, or sensor devices.",
    "parameters": {
      "type": "object",
      "properties": {
        "type": {
          "type": "integer",
          "description": "Data type to acquire: 1=image, 2=video (5 seconds), 3=audio, 4=sensor data",
          "enum": [1, 2, 3, 4]
        },
        "source": {
          "type": "string",
          "description": "Source identifier: file path for existing files, or device number for cameras/microphones/sensors (e.g. '0' for camera 0)"
        },
        "para": {
          "type": "object",
          "description": "Parameters in JSON format. For images/cameras: {\"resolution\": \"640x320\"}. For videos: {\"resolution\": \"640x320\", \"duration\": 5}. For audio: {\"sampling_rate\": 16000, \"duration\": 5}. For sensors: varies by sensor type.",
          "properties": {
            "resolution": {
              "type": "string",
              "description": "Resolution for image/video capture (e.g., '640x320', '1920x1080')"
            },
            "duration": {
              "type": "integer",
              "description": "Duration in seconds for video/audio capture"
            },
            "sampling_rate": {
              "type": "integer",
              "description": "Sampling rate for audio capture (default: 16000 Hz)"
            }
          }
        }
      },
      "required": ["type", "source"]
    }
  },
  "merge_file": {
    "description": "Merge multiple files into a single output file using the system cat command. If the output file is a Markdown file (.md), it will automatically be converted to Word and PDF formats.",
    "parameters": {
      "type": "object",
      "properties": {
        "file_list": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of files to merge, e.g., ['file1.txt', 'file2.txt', 'file3.md']. Files will be merged in the order specified."
        },
        "output_file": {
          "type": "string",
          "description": "Name of the merged output file, e.g., 'combined_report.md'."
        }
      },
      "required": ["file_list", "output_file"]
    }
  },
  "convert_docs_to_markdown": {
    "description": "Convert various document formats to Markdown. Output files will have the same filename but substituted by a .md extension. Images are automatically extracted and saved to a doc_images folder.",
    "parameters": {
      "type": "object",
      "properties": {
        "file_path": {
          "type": "string",
          "description": "Path to the document file to convert to Markdown. Supported formats: .docx, .xlsx, .html, .tex, .rst, .pptx, .pdf"
        }
      },
      "required": ["file_path"]
    }
  }
} 