# Chat-Based Tool Usage Guidelines

## Available Tools

You have access to the following tools. To use a tool, respond with JSON format:

```json
{
  "tool_calls": [
    {
      "id": "call_1",
      "type": "function",
      "function": {
        "name": "tool_name",
        "arguments": {
          "param_name": "value"
        }
      }
    }
  ]
}
```

### Core Tools

**codebase_search**
- `query` (required): The search query to find relevant code using semantic search
- `target_directories` (optional): Array of directory glob patterns to search over
- Description: Find snippets of code from the codebase most relevant to the search query. This is a semantic search tool.

**read_file**
- `target_file` (required): The path of the file to read
- `should_read_entire_file` (required): Whether to read the entire file (true/false)
- `start_line_one_indexed` (required): The one-indexed line number to start reading from
- `end_line_one_indexed_inclusive` (required): The one-indexed line number to end reading at
- Description: Read the contents of a file. The output will be the 1-indexed file contents from start_line to end_line.

**edit_file**
- `target_file` (required): The target file to modify
- `instructions` (required): Brief description of what you are doing
- `code_edit` (required): The content to write. Use '// ... existing code ...' to represent unchanged code
- `edit_mode` (required): Editing mode - "replace_lines", "insert_lines", "append", "full_replace"
- Description: Create a new file or edit an existing file. Use this to make changes to code files.

**run_terminal_cmd**
- `command` (required): The terminal command to execute
- `is_background` (required): Whether the command should be run in the background (true/false)
- Description: Execute a terminal command. For commands that use a pager or require user interaction, append ` | cat`. For long-running commands, set is_background=true.

**list_dir**
- `relative_workspace_path` (required): Path to list contents of, relative to the workspace root
- Description: List the contents of a directory. Quick tool for discovery before using more targeted tools.

### Search Tools

**grep_search**
- `query` (required): The regex pattern to search for
- `case_sensitive` (optional): Whether the search should be case sensitive (true/false)
- `exclude_pattern` (optional): Glob pattern for files to exclude
- `include_pattern` (optional): Glob pattern for files to include (e.g. '*.py')
- Description: Fast text-based regex search that finds exact pattern matches within files using ripgrep.

**file_search**
- `query` (required): Fuzzy filename to search for
- Description: Fast file search based on fuzzy matching against file paths. Use when you know part of the file path.

**web_search**
- `search_term` (required): The search term to look up on the web
- Description: Search the web for real-time information. Use when you need up-to-date information.

### Utility Tools

**tool_help**
- `tool_name` (required): The name of the tool to get help for
- Description: Get detailed help information for a specific tool, including parameters and usage examples.

## JSON Format Examples

### Single Tool Call
```json
{
  "tool_calls": [
    {
      "id": "call_1",
      "type": "function",
      "function": {
        "name": "read_file",
        "arguments": {
          "target_file": "src/main.py",
          "should_read_entire_file": false,
          "start_line_one_indexed": 1,
          "end_line_one_indexed_inclusive": 50
        }
      }
    }
  ]
}
```

### Multiple Tool Calls
```json
{
  "tool_calls": [
    {
      "id": "call_1",
      "type": "function",
      "function": {
        "name": "list_dir",
        "arguments": {
          "relative_workspace_path": "src"
        }
      }
    },
    {
      "id": "call_2",
      "type": "function",
      "function": {
        "name": "codebase_search",
        "arguments": {
          "query": "function definition",
          "target_directories": ["src/*"]
        }
      }
    }
  ]
}
```

### Tool Call with Complex Arguments
```json
{
  "tool_calls": [
    {
      "id": "call_1",
      "type": "function",
      "function": {
        "name": "edit_file",
        "arguments": {
          "target_file": "test.py",
          "instructions": "Create a simple test function",
          "code_edit": "def test_function():\n    return \"Hello World\"",
          "edit_mode": "full_replace"
        }
      }
    }
  ]
}
```

### Search with Optional Parameters
```json
{
  "tool_calls": [
    {
      "id": "call_1",
      "type": "function",
      "function": {
        "name": "grep_search",
        "arguments": {
          "query": "class\\s+\\w+",
          "case_sensitive": true,
          "include_pattern": "*.py"
        }
      }
    }
  ]
}
```

## Important Usage Notes

1. **JSON Structure**: Always use the exact JSON structure with `tool_calls` array
2. **Tool Call ID**: Each tool call must have a unique `id` (use "call_1", "call_2", etc.)
3. **Function Type**: Always set `type` to "function"
4. **Parameter Accuracy**: Use exact parameter names as specified above
5. **Required vs Optional**: Always provide required parameters
6. **Data Types**: Use proper JSON data types (strings, booleans, numbers, arrays)
7. **Information First**: Use read_file and list_dir to understand existing code before making edits
8. **Background Execution**: Use `is_background=true` for GUI apps and web servers
9. **Error Handling**: Handle tool failures gracefully
10. **Self-Diagnosis**: Use `tool_help` when uncertain about tool usage

## JSON Formatting Rules

- **Strings**: Use double quotes for all strings
- **Booleans**: Use `true` or `false` (lowercase)
- **Numbers**: Use numeric values without quotes
- **Arrays**: Use square brackets `[]` for lists
- **Objects**: Use curly braces `{}` for nested structures
- **Escaping**: Escape special characters in strings (e.g., `\n` for newlines)

## Common Patterns

- **File Analysis**: list_dir → read_file → edit_file
- **Code Search**: codebase_search → read_file → analysis
- **Pattern Search**: grep_search → read_file → verification
- **Web Research**: web_search → analysis → documentation
- **Command Execution**: run_terminal_cmd with proper flags and background settings

Remember: All tool calls must use the JSON format exactly as shown. Parameter names are case-sensitive and must match the specifications above. Each tool call needs a unique ID and proper JSON structure. 