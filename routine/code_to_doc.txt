# 代码转文档详细提示词

## 目标
分析给定的代码库，生成详细、结构化的技术文档，涵盖系统各个方面的深入解析。论述详细。
要求先对代码库先进行足够的了解，掌握用途、目标、整体架构等关键信息，之后按照文档结构要求进行输出，输出过程中，可以进一步详细阅读代码仓库中的代码及文档。

## 文档结构要求

### 1. 概述 (Overview)
- 1.1 项目简介
- 1.2 技术栈概览
- 1.3 项目规模统计

### 2. 系统架构 (System Architecture)
- 2.1 整体架构设计
- 2.2 核心设计模式
- 2.3 模块化设计
- 2.4 性能架构考量


### 3. 核心特性 (Key Features)
- 3.1 主要功能特性
- 3.2 技术特性
- 3.3 性能特性

### 4. 快速开始 (Getting Started)
- 4.1 环境要求
- 4.2 快速部署
- 4.3 基础使用示例

### 5. 安装与配置 (Installation and Setup)
- 5.1 详细安装步骤
- 5.2 配置管理
- 5.3 环境验证

### 6. 核心组件 (Core Components) 
- 6.1 组件架构图
- 6.2 核心组件详解
- 6.3 组件交互模式

### 7. 核心工作流程 (Core Workflows)
- 7.1 主要业务流程
- 7.2 数据处理流程
- 7.3 异常处理流程

### 8. 重点函数与API (Key Functions & APIs)
- 8.1 核心函数详解
- 8.2 公共API接口
- 8.3 内部工具函数

### 9. 使用方式 (Usage Methods)
- 9.1 基本使用方法
- 9.2 高级使用技巧
- 9.3 集成使用场景

### 10. 最近更新热点 (Recent Development Highlights)
- 10.1 Git提交分析 (最近6个月)
- 10.2 新增功能详解
- 10.3 bug修复和优化
- 10.4 开发趋势预测

### 11. 使用示例与案例 (Examples and Use Cases)
- 11.1 基础使用案例
- 11.2 高级应用场景
- 11.3 集成案例

### 12. 开发指南 (Development Guide)
- 12.1 代码规范
- 12.2 开发环境搭建
- 12.3 测试策略

### 13. 部署与运维 (Deployment & Operations)
- 13.1 生产环境部署
- 13.2 监控和日志
- 13.3 故障排查

### 14. 常见问题 (FAQ)
- 14.1 安装问题
- 14.2 使用问题
- 14.3 性能问题

## 特殊分析要求

### ⭐ 核心架构分析要求
- 提供详细的架构图（建议使用 Mermaid 图表）
- 分析架构选择的技术原因
- 评估架构的扩展性和维护性
- 识别潜在的架构风险点

### ⭐ 核心工作流程分析要求
- 绘制详细的流程图和时序图
- 分析关键路径和性能瓶颈
- 说明异常处理和容错机制
- 提供流程优化建议

### ⭐ 重点函数分析要求
- 详细解释算法实现逻辑
- 分析时间和空间复杂度
- 提供性能基准测试数据
- 说明函数的设计意图和使用场景
- 列出可能的改进方向

### ⭐ API文档要求
- 完整的接口规范（输入、输出、错误码）
- 详细的使用示例
- 性能特性说明
- 版本兼容性信息

### ⭐ Git热点代码分析要求
- 分析最近6个月的提交记录
- 识别高频修改的文件和函数
- 解释重大变更的技术背景
- 评估代码质量变化趋势
- 预测未来可能的发展方向

## 文档生成指导原则

1. **技术深度**: 既要有高层概述，也要有底层实现细节
2. **图表丰富**: 大量使用架构图、流程图、时序图等可视化内容
3. **代码示例**: 每个重要概念都配备实际代码示例
4. **实践导向**: 关注实际使用和部署场景
5. **维护友好**: 文档结构清晰，便于后续更新维护
6. **问题驱动**: 基于常见问题和使用场景组织内容

## 输出格式要求

- 使用 Markdown 格式
- 代码块使用语法高亮
- 重要内容使用标注和高亮
- 提供目录和交叉引用
- 包含必要的图表和示意图
